/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      phaseProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "$FOAM_CASE/constant/globalTransport"

type interfaceCompositionPhaseChangePopulationBalanceMultiphaseSystem;
//type    interfaceCompositionPhaseChangeTwoPhaseSystem;

phases (gas liquid);

D_O2  #codeStream 
{ 
    code 
    #{ 
        os<<1.173e-16*pow($WC_psi*$WC_M,0.5)*$Temp/$muMixLiq/pow($WC_V,0.6);
    #}; 
}; 

LeLiq #codeStream
{
    code
    #{
        os<<$kThermLiq/$rho0MixLiq/$D_O2/$CpMixLiq;
    #}; 
};

H_O2 #codeStream 
{ 
    code 
    #{ 
        os<<$H_O2_298 * exp($DH_O2*(1./$Temp-1./298.));
    #}; 
};

H_CO2 #codeStream 
{ 
    code 
    #{ 
        os<<$H_CO2_298 * exp($DH_CO2*(1./$Temp-1./298.));
    #}; 
};

gas
{
    type            multiComponentPhaseModel;
    // diameterModel   isothermal;
    // isothermalCoeffs
    // {
    //     d0              3e-3;
    //     p0              1e5;
    // }
    diameterModel velocityGroup;
    velocityGroupCoeffs
    {
      populationBalance    bubbles;

      shapeModel           spherical;

      sizeGroups
      (
	    f1 {dSph  1e-3; value 0.0;}
            f2 {dSph  1.5e-3; value 0.0;}
            f3 {dSph  2e-3; value 1.0;}
            f4 {dSph  2.5e-3; value 0.0;}
            f5 {dSph  3e-3; value 0.0;}
            f6 {dSph  3.5e-3; value 0.0;}
            f7 {dSph  4e-3; value 0.0;}
            f8 {dSph  4.5e-3; value 0.0;}
            f9 {dSph  5e-3; value 0.0;}
            f10 {dSph  5.5e-3; value 0.0;}
            f11 {dSph  6e-3; value 0.0;}
            f12 {dSph  6.5e-3; value 0.0;}
            f13 {dSph  7e-3; value 0.0;}
            f14 {dSph  7.5e-3; value 0.0;}
            f15 {dSph  8e-3; value 0.0;}
            f16 {dSph  8.5e-3; value 0.0;}
            f17 {dSph  9e-3; value 0.0;}
            f18 {dSph  9.5e-3; value 0.0;}
            f19 {dSph  10e-3; value 0.0;}
            f20 {dSph  10.5e-3; value 0.0;}
            f21 {dSph  11e-3; value 0.0;}
       );
    }

    residualAlpha   1e-6;
}

liquid
{
    type            multiComponentPhaseModel;
    diameterModel constant;
    constantCoeffs
    {
        d               1e-3; //1e-4; helps prevent liquid drops in head space, JJS 4/14/16
    }
    /*    Sc   #codeStream 
    { 
        code 
        #{ 
            os  << ($LeLiq * $CpMixLiq * $muMixLiq / $kThermLiq); 
        #}; 
	};*/ 

    residualAlpha   1e-6;
}

populationBalanceCoeffs
{
    bubbles
    {
        continuousPhase liquid;

	coalescenceModels
	(
	     LehrMilliesMewes{
	        efficiency 2.0;
	        uCrit 0.08;
	        alphaMax 0.6;
	     }
	 );

	binaryBreakupModels
	  ();

	breakupModels
	(
	    Laakkonen{
	      efficiency 12.0;
	      daughterSizeDistributionModel Laakkonen;
	      height_lim $LiqHt_limit;
	      height_dir 1;
	    }
        );

	driftModels
	();

	nucleationModels
	();    
    }
}

blending
{
    default
    {
        type            linear;
        minFullyContinuousAlpha.gas 0.7;
        minPartlyContinuousAlpha.gas 0.3;
        minFullyContinuousAlpha.liquid 0.7;
        minPartlyContinuousAlpha.liquid 0.3;
    }
    
    heatTransfer
    {
        type            linear;
        minFullyContinuousAlpha.gas 1;
        minPartlyContinuousAlpha.gas 0;
        minFullyContinuousAlpha.liquid 1;
        minPartlyContinuousAlpha.liquid 0;
    }
    
    massTransfer
    {
        $heatTransfer;
    }

}

surfaceTension
(
    (gas and liquid)
    {
        type            constant;
        sigma           $sigmaLiq;
    }
);

interfaceCompression
();

aspectRatio
(
    (gas in liquid)
    {
        type            constant;
        E0              1.0;
    }

    (liquid in gas)
    {
        type            constant;
        E0              1.0;
    }
);

drag
(
    (gas in liquid)
    {
        //type            SchillerNaumann;
        type            Grace;
        residualRe      1e-3;
	height_lim $LiqHt_limit;
	height_dir 1;
        swarmCorrection
        {
            type        none;
        }
    }

    (liquid in gas)
    {
        type            SchillerNaumann;
        residualRe      1e-3;
        swarmCorrection
        {
            type        none;
        }
    }
);

virtualMass
(
    (gas in liquid)
    {
        type            constantCoefficient;
        Cvm             0.5;
    }

    (liquid in gas)
    {
        type            constantCoefficient;
        Cvm             0.5;
    }
);

/*
From docs: These models describe the composition in phase 1 of the supplied pair 
at the interface with phase 2.
DWH: I verified which Le goes where by determining the corresponding rho called by
each model.
*/
interfaceComposition.gas
(
    (gas and liquid)
    {
        type saturated;
        species ( water );
        Le $LeGas;
        saturationPressure
        {
            type ArdenBuck;
        }
    }
);

interfaceComposition.liquid
(
    (liquid and gas)
    {
        type Henry;
        species (O2 CO2);
        k ($He_O2 $He_CO2 ); 
        Le $LeLiqMix;
    }
);

/*
DWH: As far as I can tell, the Le defined here are whatever shows up in the K/D eqn 
in the mass transfer model. (I.e. Le_liq shows up in Frossling and Higbie. 
Le does not appear in spherical at all, but the constructor still expects Le 
in the input dict.)
When K/D is returned and multiplied by D to compute mass transfer, that D is 
obtained from the InterfaceCompositionModel and not this Le.
*/
diffusiveMassTransfer.gas
(
    (gas in liquid)
    {
        type spherical;
        Le 1.0;
    }

    (liquid in gas)
    {
        type Higbie;
        //type Frossling;
        Le $LeGas;
    }
);

diffusiveMassTransfer.liquid
(
    (gas in liquid)
    {
        type Higbie;
        //type Frossling;
        Le $LeLiqMix;
    }

    (liquid in gas)
    {
        type spherical;
        Le 1.0;
    }
);


heatTransfer.gas
(
    (gas in liquid)
    {
        type spherical;
        residualAlpha 1e-4;
    }

    (liquid in gas)
    {
        type RanzMarshall;
        residualAlpha 1e-4;
    }
);


heatTransfer.liquid
(
    (gas in liquid)
    {
        type RanzMarshall;
        residualAlpha 1e-4;
    }

    (liquid in gas)
    {
        type spherical;
        residualAlpha 1e-4;
    }
);

lift
(
    (gas in liquid)
    {
        type           wallDamped;

        wallDamping
        {
            type       cosine;
            Cd         3.0;
        }

        lift
        {
            type       Tomiyama;
            height_lim $LiqHt_limit;
            height_dir 1;
            swarmCorrection
	    {
	        type   none;
	    }
        }
    }
);

wallLubrication
(
    (gas in liquid)
    {
        type            Antal;
        Cw1             -0.01;
        Cw2              0.05;
	height_lim $LiqHt_limit;
	height_dir 1;
    }

    (liquid in gas)
    {
        type            Antal;
        Cw1             -0.01;
        Cw2             -0.05;
    }
);

turbulentDispersion
(
    (gas in liquid)
    {
        type            Burns;
        sigma           0.9;
	height_lim $LiqHt_limit;
	height_dir 1;
    }

    (liquid in gas)
    {
        type            Burns;
        sigma           0.9;
    }
);

phaseTransfer
();

// Minimum allowable pressure
//pMin            10000;

// ************************************************************************* //
